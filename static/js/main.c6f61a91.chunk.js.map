{"version":3,"sources":["components/Loading.jsx","components/Product.jsx","globalFunction/global.js","mainComponent/Products.jsx","library/commerce.js","mainComponent/Navbar.jsx","components/SingleCart.jsx","style/material/man-shopping.png","style/material/woman-shopping.png","mainComponent/Cart.jsx","style/material/map.png","components/AddressForm.jsx","components/LastCartReview.jsx","style/material/cash.png","components/PaymentForm.jsx","style/material/fullCart.png","components/Confirmation.jsx","mainComponent/Checkout.jsx","App.js","index.js"],"names":["Loading","className","Product","product","handleAddToCart","src","image","url","alt","name","price","raw","onClick","anime","timeline","loop","add","targets","opacity","easing","duration","width","scaleX","translateY","el","i","scaleY","translateX","delay","id","Products","products","length","class","map","commerce","Commerce","process","Navbar","cartTotalItem","to","SingleCart","data","handleAddUpdateCart","handleAddRemoveFromCart","formatted_with_symbol","quantity","line_total","Cart","cart","handleAddEmptyCart","refreshCart","FullCart","line_items","c","total_items","subtotal","EmptyCart","WomanShoppig","ManShoppig","AddressForm","token","submitData","useForm","register","handleSubmit","methods","useState","shippingCountries","setShippingCountries","shippingCountry","setShippingCountry","shippingSubdivisions","setShippingSubdivisions","shippingSubdivision","setShippingSubdivision","shippingOptions","setShippingOptions","shippingOption","setShippingOption","passMeToken","a","services","localeListShippingCountries","countries","Object","keys","country","localeListShippingSubdivisions","subdivisions","checkout","getShippingOptions","region","options","useEffect","fetchAllCountries","fetchAllSubdevisions","fetchAllOptions","onSubmit","TextField","required","label","Grid","Select","varient","value","onChange","e","target","entries","MenuItem","key","option","description","type","LastCartReview","live","stripePromise","loadStripe","PaymentForm","shippingData","nextStep","backStep","handleCaptureCheckout","time","setErrorMessage","event","elements","stripe","preventDefault","cardElement","getElement","CardElement","createPaymentMethod","card","error","paymentMethod","console","log","orderData","customer","firstname","firstName","lastname","lastName","email","shipping","street","address1","town_city","city","county_state","postal_zip_code","zip","fulfillment","shipping_method","payment","gateway","payment_method_id","cash","style","display","justifyContent","disabled","Confirmation","errorMessage","order","finished","EndShipping","fullCart","Checkout","steps","checker","setChecker","setToken","setShippingData","setFinished","generateToken","tokens","Stepper","activeStep","alternativeLabel","Step","StepLabel","Typography","variant","setTimeout","withRouter","setProducts","setCart","setOrder","fetchProduct","list","productId","item","fetchCart","retrieve","update","remove","empty","refresh","newCart","checkoutTokenId","newOrder","capture","incomingOrder","message","exact","path","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c6f61a91.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Loading = () => {\n  return (\n    <>\n      <div className=\"sk-cube-grid\">\n        <div className=\"sk-cube sk-cube1\"></div>\n        <div className=\"sk-cube sk-cube2\"></div>\n        <div className=\"sk-cube sk-cube3\"></div>\n        <div className=\"sk-cube sk-cube4\"></div>\n        <div className=\"sk-cube sk-cube5\"></div>\n        <div className=\"sk-cube sk-cube6\"></div>\n        <div className=\"sk-cube sk-cube7\"></div>\n        <div className=\"sk-cube sk-cube8\"></div>\n        <div className=\"sk-cube sk-cube9\"></div>\n      </div>\n    </>\n  );\n};\n\nexport default Loading;\n","import React from \"react\";\nimport { addToCartAnimation } from \"../globalFunction/global\";\nconst Product = ({ product, handleAddToCart }) => {\n  return (\n    <div className=\"product\">\n      <div className=\"product_image\">\n        <img src={product.image.url} alt=\" \" />\n      </div>\n      <div className=\"product_text\">\n        <p>{product.name}</p>\n        <p>${product.price.raw}</p>\n      </div>\n      <button\n        onClick={() => {\n          addToCartAnimation();\n          handleAddToCart(product.id, 1);\n        }}\n      >\n        <span></span>\n        <span></span>\n        <i className=\"fas fa-plus\"></i>\n      </button>\n    </div>\n  );\n};\n\nexport default Product;\n","import anime from \"animejs/lib/anime.es.js\";\n\nexport function addToCartAnimation() {\n  anime\n    .timeline({ loop: false })\n    .add({\n      targets: \".ml5\",\n      opacity: [0.5, 1],\n      easing: \"easeInOutExpo\",\n      duration: 200,\n      width: [\"0vw\", \"90vw\"],\n    })\n    .add({\n      targets: \".ml5 .line\",\n      opacity: [0.5, 1],\n      scaleX: [0, 1],\n      easing: \"easeInOutExpo\",\n      duration: 200,\n    })\n    .add({\n      targets: \".ml5 .line\",\n      duration: 300,\n      easing: \"easeOutExpo\",\n      translateY: (el, i) => -0.625 + 0.625 * 2 * i + \"em\",\n    })\n    .add({\n      targets: \".ml5 .ampersand\",\n      opacity: [0, 1],\n      scaleY: [0.5, 1],\n      easing: \"easeOutExpo\",\n      duration: 200,\n    })\n    .add({\n      targets: \".ml5 .letters-left\",\n      opacity: [0, 1],\n      translateX: [\"0.5em\", 0],\n      easing: \"easeOutExpo\",\n      duration: 200,\n    })\n    .add({\n      targets: \".ml5 .letters-right\",\n      opacity: [0, 1],\n      translateX: [\"-0.5em\", 0],\n      easing: \"easeOutExpo\",\n      duration: 200,\n    })\n    .add({\n      targets: \".ml5\",\n      opacity: [1, 0],\n      duration: 100,\n      easing: \"easeOutExpo\",\n      delay: 1000,\n    })\n    .add({\n      targets: \".ml5 .line\",\n      duration: 10,\n      easing: \"easeOutExpo\",\n      translateY: (el, i) => +0 + \"em\",\n    })\n    .add({\n      targets: \".ml5\",\n      easing: \"linear\",\n      duration: 10,\n      width: [\"100vw\", \"0vw\"],\n    });\n}\n","import React from \"react\";\nimport Loading from \"../components/Loading\";\nimport Product from \"../components/Product\";\n// Here we Recived products array and handleAddToCart method\n// Then looping array through Product Component\n\nconst Products = ({ products, handleAddToCart }) => {\n  if (!products.length) return <Loading />;\n  return (\n    <div className=\"products\">\n      <h1 class=\"ml5\">\n        <span class=\"text-wrapper\">\n          <span class=\"line line1\"></span>\n          <span class=\"letters letters-left\">added</span>\n          <span class=\"letters ampersand\">to</span>\n          <span class=\"letters letters-right\">cart</span>\n          <span class=\"line line2\"></span>\n        </span>\n      </h1>\n      {products.map((product) => (\n        <div key={product.id}>\n          <Product product={product} handleAddToCart={handleAddToCart} />\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default Products;\n","import Commerce from \"@chec/commerce.js\";\nexport const commerce = new Commerce(process.env.REACT_APP_API_CHECK_KEY, true);\n\n// To get data from your commerce.js you need API key\n// Get your API key form commerce.js\n// Create new file called .env to store variables\n// Get the variable through process.env<Then key name>\n// Now we aple to connect to our commerce.js\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nconst Navbar = ({ cartTotalItem }) => {\n  return (\n    <div className=\"navbar\">\n      <span className=\"logo\">Botique</span>\n      <Link to=\"https://al-amiir.github.io/Boutique/\">\n        <span>Home</span>\n      </Link>\n      <Link to=\"https://al-amiir.github.io/Boutique/cart/\">\n        <button className=\"navbar_cart\">\n          {/* <img src={AddToCartImage} alt=\"\" /> */}\n          <span className=\"material-icons\">add_shopping_cart</span>\n          <p>{cartTotalItem}</p>\n        </button>\n      </Link>\n    </div>\n  );\n};\n\nexport default Navbar;\n","import React from \"react\";\n\nconst SingleCart = ({ data, handleAddUpdateCart, handleAddRemoveFromCart }) => {\n  return (\n    <div className=\"singleCart\">\n      <img className=\"singleCart_image\" src={data.image.url} alt=\"\" />\n      <div className=\"singleCart_text\">\n        <p>\n          <span>name:</span> {data.name}\n        </p>\n        <p>\n          <span>price:</span>\n          {data.price.formatted_with_symbol}\n        </p>\n        <div className=\"singleCart_quantity\">\n          <button onClick={() => handleAddUpdateCart(data.id, { quantity: data.quantity - 1 })} className=\"singleCart_button singleCart_button-minus\">\n            -\n          </button>\n          <span>{data.quantity}</span>\n          <button onClick={() => handleAddUpdateCart(data.id, { quantity: data.quantity + 1 })} className=\"singleCart_button singleCart_button-plus\">\n            +\n          </button>\n        </div>\n        <p>\n          <span>total price:</span> {data.line_total.formatted_with_symbol}\n        </p>\n        <button onClick={() => handleAddRemoveFromCart(data.id)} className=\"singleCart_button-remove\">\n          Remove\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default SingleCart;\n// id: \"item_7RyWOwmK5nEa2V\"\n// image: {id: \"ast_A12JwrB3avwPjn\", url: \"https://cdn.chec.io/merchants/35082/assets/kVnRGLBXYdn9xcyw|IMG_20170926_204542_259.jpg\", description: null, is_image: true, filename: \"IMG_20170926_204542_259.jpg\", …}\n// is_valid: true\n// line_total: {raw: 460, formatted: \"460.00\", formatted_with_symbol: \"$460.00\", formatted_with_code: \"460.00 USD\"}\n// name: \"T-Shirt\"\n// permalink: \"Mfo8Me\"\n// price: {raw: 20, formatted: \"20.00\", formatted_with_symbol: \"$20.00\", formatted_with_code: \"20.00 USD\"}\n// product_id: \"prod_VPvL5z3N1rlAQk\"\n// product_meta: []\n// product_name: \"T-Shirt\"\n// quantity: 23\n","export default __webpack_public_path__ + \"static/media/man-shopping.9f1860db.png\";","export default __webpack_public_path__ + \"static/media/woman-shopping.6f482976.png\";","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport SingleCart from \"../components/SingleCart\";\nimport Loading from \"../components/Loading\";\nimport ManShoppig from \"../style/material/man-shopping.png\";\nimport WomanShoppig from \"../style/material/woman-shopping.png\";\n\n// As we are in Cart component,  we have two component, FullCart and EmptyCart\n\n// We recive cart from App.js and it is looks like this :\n////////////////////////////////////////////////////////////\n// created: 1634927250\n// currency: {code: \"USD\", symbol: \"$\"}\n// discount: []\n// expires: 1637523023\n// hosted_checkout_url: \"https://checkout.chec.io/cart/cart_J5aP3vV9pR7d2o\"\n// id: \"cart_J5aP3vV9pR7d2o\"\n// line_items: [{…}]\n// subtotal: {raw: 440, formatted: \"440.00\", formatted_with_symbol: \"$440.00\", formatted_with_code: \"440.00 USD\"}\n// total_items: 22\n// total_unique_items: 1\n// updated: 1634931023\n////////////////////////////////////////////////////////////\n// 1)\n// If line_items had objects, it is means that customer adds some products in cart, so we use FullCart component\n// What we do in FullCart Component :\n// - loop through every product in cart with SingleCart component and send data to it and methods\n// - display some details about cart like total items and total price\n////////////////////////////////////////////////////////////\n// 2)\n// If line_items had no objects display EmptyCart\n////////////////////////////////////////////////////////////\n\nconst Cart = ({ cart, handleAddUpdateCart, handleAddRemoveFromCart, handleAddEmptyCart, refreshCart }) => {\n  // 1)\n  function FullCart() {\n    return (\n      <div>\n        {/* <img src={businessReport} alt=\"\" /> */}\n        <div className=\"fullCart\">\n          <div className=\"fullCart_products\">\n            {cart.line_items.map((c) => (\n              <SingleCart key={c.id} data={c} handleAddUpdateCart={handleAddUpdateCart} handleAddRemoveFromCart={handleAddRemoveFromCart} refreshCart={refreshCart} />\n            ))}\n          </div>\n          <div className=\"fullCart_total\">\n            <div className=\"fullCart_details\">\n              <span className=\"fullCart_details-totalItems\">\n                <strong>total items: </strong> {cart.total_items}\n              </span>\n              <span className=\"fullCart_details-totalPrice\">\n                <strong>total price :</strong> {cart.subtotal.formatted_with_symbol}\n              </span>\n            </div>\n            <button className=\"button_empty\" onClick={() => handleAddEmptyCart()}>\n              Empty Cart\n            </button>\n            <Link to=\"https://al-amiir.github.io/Boutique/checkout\">\n              <button className=\"button_checkout\">Checkout</button>\n            </Link>\n          </div>\n        </div>\n      </div>\n    );\n  }\n  function EmptyCart() {\n    return (\n      <div className=\"emptyCart\">\n        <p className=\"emptyCart_text sign\">\n          Your Cart is <span className=\"flicker\">e</span>mp <span className=\"flicker\">t</span> y, Add some <span className=\"fast-flicker\">products </span>\n        </p>\n        <div className=\"emptyCart_image\">\n          <img className=\"emptyCart_image-woman\" src={WomanShoppig} alt=\"\" />\n          <img className=\"emptyCart_image-man\" src={ManShoppig} alt=\"\" />\n        </div>\n      </div>\n    );\n  }\n  if (!cart.line_items) return <Loading />;\n  return <div className=\"cartContainer\">{!cart.line_items.length ? <EmptyCart /> : <FullCart />}</div>;\n};\n\nexport default Cart;\n","export default __webpack_public_path__ + \"static/media/map.bbef4708.png\";","import React, { useState, useEffect } from \"react\";\nimport { useForm, FormProvider } from \"react-hook-form\";\n\nimport Grid from \"@mui/material/Grid\";\nimport Select from \"@mui/material/Select\";\nimport MenuItem from \"@mui/material/MenuItem\";\nimport TextField from \"@mui/material/TextField\";\nimport Typography from \"@mui/material/Typography\";\n\nimport { commerce } from \"../library/commerce\";\nimport map from \"../style/material/map.png\";\n// So here we use react hook form to easily get data from our form\n// What is logic here ?\n// - we have form with some inputs, client should fill those inputs\n// - then in commerce.js we decide some countries to available shipping to, each country has subdevisions so options in shipping will different\n\n// - countries > US   Subdevisions  > california   shiping options\n//                                  > NYC\n\n//             > Egypt Subdevisions > Alexandria   shiping options\n//                                  > Cairo\n// When client choose us subdevision change then options change\n// When client choose Egypt subdevision change then options change\n\n//------------------------------------------------------------------------------------------\n// 1)\n// We recive token from checkout component\n// By this token we fetching countires in your commerce.js then pass value to shippingCountries\n// and we pass one value to shippingCountriey\n\n// 2)\n// then we focus on subdevision countries in shippingCountriey\n// So Fetching subdevisions\n// set all subdevisions fetched in  shippingSubdivisions\n// and we pass the first value to shippingSubdivision\n\n// 3)\n// Fetching shipping options\n\n// 4)\n// in react-hook-form we use onSubmit method to recieve all data from form, search in docs\n// We use register to send data to data argument in onSubmit\n// So now send data through submitData to Checkout Component\n//------------------------------------------------------------------------------------------\n\nconst AddressForm = ({ token, submitData }) => {\n  const { register, handleSubmit } = useForm();\n  const methods = useForm();\n\n  const [shippingCountries, setShippingCountries] = useState([]);\n  const [shippingCountry, setShippingCountry] = useState(\"\");\n  const [shippingSubdivisions, setShippingSubdivisions] = useState([]);\n  const [shippingSubdivision, setShippingSubdivision] = useState(\"\");\n  const [shippingOptions, setShippingOptions] = useState([]);\n  const [shippingOption, setShippingOption] = useState(\"\");\n\n  /////////////////////////////////////////////////////////////////////////////////////////\n  // 1)\n  // Fetching All Countries\n  async function fetchAllCountries(passMeToken) {\n    let { countries } = await commerce.services.localeListShippingCountries(passMeToken);\n    setShippingCountries(countries);\n    setShippingCountry(Object.keys(countries)[0]);\n  }\n  // Use Effect for all countries, on render and when token updates\n  useEffect(() => {\n    fetchAllCountries(token.id);\n  }, [token]);\n  /////////////////////////////////////////////////////////////////////////////////////////\n\n  /////////////////////////////////////////////////////////////////////////////////////////\n  // 2)\n  // Fetching Subdevisions\n  async function fetchAllSubdevisions(passMeToken, country) {\n    let { subdivisions } = await commerce.services.localeListShippingSubdivisions(passMeToken, country);\n    setShippingSubdivisions(subdivisions);\n    setShippingSubdivision(Object.keys(subdivisions)[0]);\n  }\n  // Use effect for subdevision of first country, on render and when shippingCountry updates\n  useEffect(() => {\n    if (shippingCountry) fetchAllSubdevisions(token.id, shippingCountry);\n  }, [shippingCountry]);\n  /////////////////////////////////////////////////////////////////////////////////////////\n\n  /////////////////////////////////////////////////////////////////////////////////////////\n  // 3)\n  // Fetching Options\n  async function fetchAllOptions(passMeToken, shippingCountry, shippingSubdivision) {\n    let options = await commerce.checkout.getShippingOptions(passMeToken, {\n      country: shippingCountry,\n      region: shippingSubdivision,\n    });\n    setShippingOptions(options);\n    setShippingOption(options[0].id);\n  }\n  // Use effect for option of first subdivision\n  useEffect(() => {\n    if (shippingSubdivision) {\n      fetchAllOptions(token.id, shippingCountry, shippingSubdivision);\n    }\n  }, [shippingSubdivision]);\n  /////////////////////////////////////////////////////////////////////////////////////////\n\n  return (\n    <>\n      {/* <p className=\"form_header\">Shipping address</p> */}\n      <FormProvider {...methods}>\n        <form\n          className=\"form_address\"\n          // 4)\n          onSubmit={handleSubmit((data) => {\n            submitData({\n              ...data,\n              shippingCountry,\n              shippingSubdivision,\n              shippingOption,\n            });\n          })}\n        >\n          {/* inputs filled by client  */}\n          <div className=\"form_inputs\">\n            <TextField {...register(\"firstName\", { required: true })} required name=\"firstName\" label=\"First name\" />\n            <TextField {...register(\"lastName\", { required: true })} required name=\"lastName\" label=\"Last name\" />\n            <TextField {...register(\"address1\", { required: true })} required name=\"address1\" label=\"Address line 1\" />\n            <TextField {...register(\"city\", { required: true })} required name=\"city\" label=\"City\" />\n            <TextField {...register(\"email\", { required: true })} required name=\"email\" label=\"Email\" />\n            <TextField {...register(\"zip\", { required: true })} required name=\"zip\" label=\"Zip / Postal code\" />\n          </div>\n          {/*  */}\n          <img className=\"map\" src={map} alt=\"\" />\n          <div>\n            {/* 1 */}\n            <Grid>\n              <p className=\"form_select-header\">Shipping Country</p>\n              <Select varient=\"h3\" className=\"form_select\" value={shippingCountry} onChange={(e) => setShippingCountry(e.target.value)}>\n                {Object.entries(shippingCountries).map(([id, country]) => (\n                  <MenuItem key={id} value={id}>\n                    {country}\n                  </MenuItem>\n                ))}\n              </Select>\n            </Grid>\n            {/*  */}\n\n            {/* 2 */}\n            <Grid>\n              <p className=\"form_select-header\">Shipping Subdevisions</p>\n              <Select className=\"form_select\" value={shippingSubdivision} onChange={(e) => setShippingSubdivision(e.target.value)}>\n                {Object.entries(shippingSubdivisions).map(([key, country]) => (\n                  <MenuItem key={key} value={key}>\n                    {country}\n                  </MenuItem>\n                ))}\n              </Select>\n            </Grid>\n            {/*  */}\n\n            {/* 3 */}\n            <Grid>\n              <p className=\"form_select-header\">Shipping Options</p>\n              <Select className=\"form_select\" value={shippingOption} onChange={(e) => setShippingOption(e.target.value)}>\n                {shippingOptions.map((option) => (\n                  <MenuItem key={option.id} value={option.id}>\n                    {`${option.description}  `}\n                    {option.price.formatted_with_symbol}\n                  </MenuItem>\n                ))}\n              </Select>\n            </Grid>\n            {/*  */}\n          </div>\n          <br />\n          <button className=\"form_submit\" type=\"submit\">\n            Submit\n          </button>\n        </form>\n      </FormProvider>\n    </>\n  );\n};\n\nexport default AddressForm;\n","import React from \"react\";\n\nconst LastCartReview = ({ token }) => {\n  return (\n    <div className=\"last_cart_review\">\n      {token.live.line_items.map((product) => (\n        <div className=\"last_cart_review_div\" key={product.name}>\n          <div className=\"last_cart_review_text\">\n            <span>{product.name}</span>\n            <span>Quantity: {product.quantity}</span>\n          </div>\n          <span className=\"last_cart_review_cost\">{product.line_total.formatted_with_symbol}</span>\n        </div>\n      ))}\n      <div className=\"last_cart_review_totalCost\">\n        <span>Total: </span>\n        <span> {token.live.subtotal.formatted_with_symbol}</span>\n      </div>\n    </div>\n  );\n};\n\nexport default LastCartReview;\n","export default __webpack_public_path__ + \"static/media/cash.4a9115e9.png\";","import { Elements, CardElement, ElementsConsumer } from \"@stripe/react-stripe-js\";\nimport { loadStripe } from \"@stripe/stripe-js\";\nimport React, { useState } from \"react\";\nimport LastCartReview from \"./LastCartReview\";\nimport cash from \"../style/material/cash.png\";\n// Here we use stripe to complete payment of cart\n// 1)\n// load stripe\nconst stripePromise = loadStripe(`${process.env.REACT_APP_STRIPE_KEY}`);\n\n// 2)\n// Use Element component, pass stripe to it\n\n// 3)\n// Use Elemnt Counsumer Component\n\n// 4)\n// pass elements,stripe to onSubmit\n\n// 5)\n// Create handleSubmit method to deal with recieved elements and stripe\n\nconst PaymentForm = ({ shippingData, token, nextStep, backStep, handleCaptureCheckout, setErrorMessage, time }) => {\n  const [pay, setPay] = useState(false);\n  ////////////////////////////////////////////////////////////////////////////////\n  // 5)\n  const handleSubmit = async (event, elements, stripe) => {\n    // 5.1)\n    // Prevent Default\n    event.preventDefault();\n    // 5.2)\n    // if no stripe or elements go out\n    if (!stripe || !elements) return;\n    // 5.3)\n    // Destructure error and paymentMethod\n    const cardElement = elements.getElement(CardElement);\n    const { error, paymentMethod } = await stripe.createPaymentMethod({\n      type: \"card\",\n      card: cardElement,\n    });\n    // 5.4)\n    // if there is any errors\n    if (error) {\n      console.log(\"[error]\", error);\n      // setErrorMessage(error);\n    } else {\n      // 5.5)\n      // Create the last and final object about your order\n\n      const orderData = {\n        line_items: token.live.line_items,\n        customer: {\n          firstname: shippingData.firstName,\n          lastname: shippingData.lastName,\n          email: shippingData.email,\n        },\n        shipping: {\n          name: \"International\",\n          street: shippingData.address1,\n          town_city: shippingData.city,\n          county_state: shippingData.shippingSubdivision,\n          postal_zip_code: shippingData.zip,\n          country: shippingData.shippingCountry,\n        },\n        fulfillment: { shipping_method: shippingData.shippingOption },\n        payment: {\n          gateway: \"stripe\",\n          stripe: {\n            payment_method_id: paymentMethod.id,\n          },\n        },\n      };\n      // 5.6)\n      // Capture order to capture an order and payment by providing the checkout token\n      // and necessary data for the order to be completed.\n      // The resolved promise returns an order object which can be used for receipt.\n      handleCaptureCheckout(token.id, orderData);\n      time();\n      nextStep();\n    }\n  };\n\n  return (\n    <div className=\"form_payment\">\n      <LastCartReview token={token} />\n\n      {/* 2 */}\n      <Elements stripe={stripePromise}>\n        {/* 3 */}\n        <ElementsConsumer>\n          {/* 4 */}\n          {({ elements, stripe }) => (\n            <form onSubmit={(e) => handleSubmit(e, elements, stripe)}>\n              <span className=\"form_payment_image\">\n                <img src={cash} alt=\"\" />\n              </span>\n              <CardElement />\n\n              <span style={{ display: \"flex\", justifyContent: \"space-around\" }}>\n                <button className=\"button_backstep\" onClick={backStep}>\n                  Back\n                </button>\n                <button className=\"button_pay\" type=\"submit\" onClick={nextStep} disabled={!stripe}>\n                  Pay {token.live.subtotal.formatted_with_symbol}\n                </button>\n              </span>\n            </form>\n          )}\n        </ElementsConsumer>\n      </Elements>\n    </div>\n  );\n};\n\nexport default PaymentForm;\n","export default __webpack_public_path__ + \"static/media/fullCart.d8c68172.png\";","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport Loading from \"./Loading\";\nimport fullCart from \"../style/material/fullCart.png\";\n// Here if we had error, back to home\n// else, if we get order.customer, meaning that order is loaded display Done\n// else display Loading untill it loads\n\nlet Confirmation = ({ errorMessage, order, finished, refreshCart }) => {\n  function EndShipping() {\n    return (\n      <div className=\"endShipping\">\n        <img className=\"endShipping_image\" src={fullCart} alt=\"\" />\n        <p>Thank you for your purchases.</p>\n        {/* <p>Order ref: {order.customer_reference}</p> */}\n        <Link to=\"https://al-amiir.github.io/Boutique/\">\n          <button className=\"endShipping_home\" onClick={refreshCart}>\n            Home\n          </button>\n        </Link>\n      </div>\n    );\n  }\n  return <div className=\"confirmation\">{order.customer ? \"Done\" : finished ? <EndShipping /> : <Loading />}</div>;\n};\n\nexport default Confirmation;\n","import React, { useState, useEffect } from \"react\";\nimport AddressForm from \"../components/AddressForm\";\nimport PaymentForm from \"../components/PaymentForm\";\nimport { commerce } from \"../library/commerce\";\nimport Confirmation from \"../components/Confirmation\";\nimport Stepper from \"@mui/material/Stepper\";\nimport Step from \"@mui/material/Step\";\nimport StepLabel from \"@mui/material/StepLabel\";\nimport Typography from \"@mui/material/Typography\";\n// Lets Read What is Checkout in commerce.js :\n//\n// The checkout resource is used to navigate your customers\n// through the transaction and shipping stage of a purchasing flow.\n// A checkout captures data sent from the cart along with the item information,\n// line item IDs, any shipping or billing information as well as tax and shipping rates.\n//---------------------------------------------------------------------------------------\n// 1)\n// Lets Generate Token by cart.id\n// We need shipping data\n// So we create Address Component to make client set his info in it then we get it in shippingData variable\n// Go to Address Component\n//---------------------------------------------------------------------------------------\n// 2)\n// Back from Address Component ?\n// Now we have shippingData\n// Send it to PaymentForm With handleCaptureCheckout\n// Go to Payment Component\n//---------------------------------------------------------------------------------------\n// 3)\n// Back from Payment Component ?\n// Now you in the last step , The Confirmation\n// Go to Confirmation Component\n//---------------------------------------------------------------------------------------\n\nconst Checkout = ({ cart, handleCaptureCheckout, order, errorMessage, setErrorMessage, refreshCart }) => {\n  const [steps, setSteps] = useState([\"AddressForm\", \"PaymentForm\", \"Confirmation\"]);\n  const [checker, setChecker] = useState(0);\n  const [token, setToken] = useState([]);\n  const [shippingData, setShippingData] = useState([]);\n\n  const [finished, setFinished] = useState(false);\n\n  function time() {\n    setTimeout(() => {\n      setFinished(true);\n      return <p>Thanks</p>;\n    }, 3000);\n  }\n  /////////////////////////////////////////////////////////////////////////\n  // 1)\n  useEffect(async () => {\n    try {\n      let tokens = await commerce.checkout.generateToken(cart.id, {\n        type: \"cart\",\n      });\n      setToken(tokens);\n    } catch (error) {\n      console.log(error);\n    }\n  }, [cart, shippingData]);\n\n  function submitData(data) {\n    setShippingData(data);\n    nextStep();\n  }\n  /////////////////////////////////////////////////////////////////////////\n\n  function nextStep() {\n    setChecker(checker + 1);\n  }\n  function backStep() {\n    setChecker(checker - 1);\n  }\n\n  return (\n    <div className=\"checkout\">\n      {/* <div className=\"checkout_circles\"> */}\n      <Stepper className=\"checkout_stepper\" activeStep={checker} alternativeLabel>\n        {steps.map((label) => (\n          <Step key={label}>\n            <StepLabel>\n              <Typography variant=\"h6\"> {label}</Typography>\n            </StepLabel>\n          </Step>\n        ))}\n      </Stepper>\n      <span className=\"checkout_borders\"></span>\n      {checker === steps.length ? <Confirmation finished={finished} order={order} errorMessage={errorMessage} refreshCart={refreshCart} /> : checker === 0 ? <AddressForm token={token} submitData={submitData} /> : <PaymentForm shippingData={shippingData} token={token} nextStep={nextStep} backStep={backStep} setErrorMessage={setErrorMessage} handleCaptureCheckout={handleCaptureCheckout} time={time} />}\n    </div>\n  );\n};\n\nexport default Checkout;\n","import React, { useEffect, useState } from \"react\";\nimport Products from \"./mainComponent/Products\";\nimport { commerce } from \"./library/commerce\";\nimport Navbar from \"./mainComponent/Navbar\";\nimport Cart from \"./mainComponent/Cart\";\nimport { BrowserRouter as Switch, Route } from \"react-router-dom\";\nimport { withRouter } from \"react-router\";\nimport Checkout from \"./mainComponent/Checkout\";\n\n// Hello here is we start describe every detail\n// First of all i used commerce.js to create my products (search for commerce.js)\n// Then i add a library folder > commerce.js  (go to the file to read comments)\n//---------------------------------------------------------------------------\n// 1)\n// From commerce.js docs we have alot of methods\n// Like >> commerce.products.list() << it used to get products\n// So we fetch all products in the start of react render App.js through useEffect\n// Then store them in products\n// Then send Them to Products Component\n// commerce.js also provide Cart fo us\n// So we send to product component >> handleAddToCart << method to add a product to cart on click\n//------------------------------------------------------------------------------\n// 2)\n// Now lets Focus on Cart Component\n// First we Fetch Cart details from commerce.js >> commerce.cart.retrieve << through fetchCart method in useEffect\n// Store it in cart variable, send it to Cart component\n// Then we send some methods to Cart like :\n// >> commerce.cart.update << through handleAddUpdateCart method to increase or decrease quantity of product\n// >> commerce.cart.remove << through handleAddRemoveFromCart method to remove product from Cart\n// >> commerce.cart.empty << through handleAddEmptyCart to empty entire Cart\n// Go to Cart component\n//------------------------------------------------------------------------------\n// 3)\n// Now client want to buy products in cart\n// Go to Checkout Component,\n//------------------------------------------------------------------------------\n\nconst App = () => {\n  let [products, setProducts] = useState([]);\n  let [cart, setCart] = useState({});\n  const [order, setOrder] = useState({});\n  const [errorMessage, setErrorMessage] = useState(\"\");\n\n  ///////////////////////////////////////////////////////////////////////\n  // 1)\n  ///////////////////////////////////////////////////////////////////////\n  let fetchProduct = async () => {\n    const { data } = await commerce.products.list();\n    setProducts(data);\n  };\n  let handleAddToCart = async (productId, quantity) => {\n    const item = await commerce.cart.add(productId, quantity);\n    setCart(item.cart);\n  };\n  ///////////////////////////////////////////////////////////////////////\n\n  ///////////////////////////////////////////////////////////////////////\n  // 2)\n  ///////////////////////////////////////////////////////////////////////\n  let fetchCart = async () => {\n    const data = await commerce.cart.retrieve();\n    setCart(data);\n  };\n  let handleAddUpdateCart = async (productId, quantity) => {\n    const item = await commerce.cart.update(productId, quantity);\n    setCart(item.cart);\n  };\n  let handleAddRemoveFromCart = async (productId) => {\n    const item = await commerce.cart.remove(productId);\n    setCart(item.cart);\n  };\n  let handleAddEmptyCart = async (productId) => {\n    const item = await commerce.cart.empty(productId);\n    setCart(item.cart);\n  };\n  ///////////////////////////////////////////////////////////////////////\n\n  ///////////////////////////////////////////////////////////////////////\n  // 3)\n  ///////////////////////////////////////////////////////////////////////\n  const refreshCart = async () => {\n    const newCart = await commerce.cart.refresh();\n    setCart(newCart);\n  };\n  const handleCaptureCheckout = async (checkoutTokenId, newOrder) => {\n    try {\n      const incomingOrder = await commerce.checkout.capture(checkoutTokenId, newOrder);\n      setOrder(incomingOrder);\n      refreshCart();\n    } catch (error) {\n      setErrorMessage(error.data.error.message);\n    }\n  };\n  ///////////////////////////////////////////////////////////////////////\n\n  useEffect(() => {\n    fetchProduct();\n    fetchCart();\n  }, []);\n  return (\n    <div>\n      <Switch>\n        <Navbar cartTotalItem={cart.total_items} />\n\n        {/* 1) */}\n        <Route exact path=\"https://al-amiir.github.io/Boutique/\">\n          <Products products={products} handleAddToCart={handleAddToCart} />\n        </Route>\n        {/*  */}\n\n        {/* 2 */}\n        <Route path=\"https://al-amiir.github.io/Boutique/cart/\">\n          <Cart cart={cart} handleAddUpdateCart={handleAddUpdateCart} handleAddRemoveFromCart={handleAddRemoveFromCart} handleAddEmptyCart={handleAddEmptyCart} />\n        </Route>\n        {/*  */}\n\n        {/* 3 */}\n        <Route path=\"https://al-amiir.github.io/Boutique/checkout/\">\n          <Checkout cart={cart} handleCaptureCheckout={handleCaptureCheckout} order={order} errorMessage={errorMessage} setErrorMessage={setErrorMessage} refreshCart={refreshCart} />\n        </Route>\n        {/*  */}\n      </Switch>\n      <br />\n      <br />\n      <br />\n    </div>\n  );\n};\n\nexport default withRouter(App);\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}